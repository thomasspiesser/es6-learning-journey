{"version":3,"sources":["../code/index.js"],"names":[],"mappings":";;;;;;IAAM;AACJ,WADI,IACJ,GAAc;0BADV,MACU;;;AAEZ,SAAK,MAAL,GAAc,IAAd,CAFY;AAGZ,SAAK,IAAL,GAAY,IAAZ,CAHY;GAAd;;eADI;;wBASA,MAAM;AACR,UAAI,KAAK,MAAL,KAAgB,IAAhB,EAAsB;;;AAGxB,aAAK,MAAL,GAAc,KAAK,QAAL,EAAd;;AAHwB,YAKxB,CAAK,IAAL,GAAY,KAAK,MAAL,CALY;OAA1B,MAMO;;;;AAIL,aAAK,IAAL,CAAU,IAAV,GAAiB,KAAK,QAAL,EAAjB;;AAJK,YAML,CAAK,IAAL,GAAY,KAAK,IAAL,CAAU,IAAV,CANP;OANP;;AADQ,UAgBR,CAAK,IAAL,CAAU,IAAV,GAAiB,IAAjB,CAhBQ;;;;kCAkBI,MAAM;;AAElB,UAAI,MAAM,KAAK,QAAL,EAAN;;AAFc,SAIlB,CAAI,IAAJ,GAAW,IAAX;;AAJkB,SAMlB,CAAI,IAAJ,GAAW,KAAK,MAAL;;AANO,UAQlB,CAAK,MAAL,GAAc,GAAd,CARkB;;;;4BAUb,MAAM;AACX,UAAI,UAAU,KAAK,MAAL,CADH;AAEX,UAAI,WAAW,KAAK,MAAL,CAFJ;AAGX,aAAO,YAAY,IAAZ,EAAkB;AACvB,YAAI,SAAS,QAAQ,IAAR,EAAc;;AAEzB,cAAI,YAAY,KAAK,MAAL,EAAa;;AAE3B,iBAAK,MAAL,GAAc,QAAQ,IAAR;;AAFa;WAA7B,MAKO,IAAI,YAAY,KAAK,IAAL,EAAW;;AAEhC,iBAAK,IAAL,GAAY,QAAZ;;AAFgC,gBAIhC,CAAK,IAAL,CAAU,IAAV,GAAiB,IAAjB,CAJgC;WAA3B,MAKA;;;AAGL,qBAAS,IAAT,GAAgB,QAAQ,IAAR;;AAHX;WALA;SAPT;AAoBA,mBAAW,OAAX,CArBuB;AAsBvB,kBAAU,QAAQ,IAAR,CAtBa;OAAzB;;;;0BAyBI;AACJ,UAAI,UAAU,KAAK,MAAL,CADV;AAEJ,aAAO,YAAY,IAAZ,EAAkB;AACxB,gBAAQ,GAAR,CAAY,QAAQ,IAAR,CAAZ,CADwB;AAExB,kBAAU,QAAQ,IAAR,CAFc;OAAzB;;;;yBAKG,GAAG;AACN,UAAI,UAAU,KAAK,MAAL,CADR;AAEN,aAAO,YAAY,IAAZ,EAAkB;AACvB,UAAE,OAAF,EADuB;AAEvB,kBAAU,QAAQ,IAAR,CAFa;OAAzB;;;;+BApEgB;AAChB,aAAO,EAAC,MAAM,IAAN,EAAY,MAAM,IAAN,EAApB,CADgB;;;;SANd;;;AAiFN,IAAM,OAAO,IAAI,IAAJ,EAAP;;;AAGN,KAAK,IAAI,IAAI,CAAJ,EAAO,KAAK,CAAL,EAAQ,GAAxB,EAA6B;AAC3B,OAAK,GAAL,CAAS,CAAT,EAD2B;CAA7B;;;;;;;AASA,KAAK,aAAL,CAAmB,GAAnB;;;AAGA,KAAK,MAAL,CAAY,CAAZ;AACA,KAAK,GAAL;;AAEA,KAAK,IAAL,CAAU,UAAC,IAAD;SAAQ,QAAQ,GAAR,CAAY,IAAZ;CAAR,CAAV","file":"index.js","sourcesContent":["class List {\n  constructor() {\n    // references to the start and the end of the list\n    this._start = null;\n    this._end = null;\n  }\n  static makeNode() {\n    return {data: null, next: null};\n  }\n  add(data) {\n    if (this._start === null) {\n      // if there is no Node yet\n      // create a Node\n      this._start = List.makeNode();\n      // which is the single node, so the is start and end\n      this._end = this._start;\n    } else {\n      // if there is a Node already\n      // make a new node and store a reference to that Node in the next \n      // property of the current node\n      this._end.next = List.makeNode();\n      // then update the ref to the last Node\n      this._end = this._end.next\n    }\n    // finally set the data of the new Node\n    this._end.data = data;\n  }\n  insertAsFirst(data) {\n    // make temporary node\n    let tmp = List.makeNode();\n    // fill with data\n    tmp.data = data;\n    // set the next property to the current first node\n    tmp.next = this._start;\n    // update the start pointer\n    this._start = tmp;\n  }\n  delete(data) {\n    let current = this._start;\n    let previous = this._start;\n    while (current !== null) {\n      if (data === current.data) {\n        // found the right node\n        if (current === this._start) {\n          // if it is the first node, set the start pointer to the next one.\n          this._start = current.next;\n          // and stop the loop\n          return;\n        } else if (current === this._end) {\n          // if it is the last node, set the end pointer to the previous one.\n          this._end = previous;\n          // and remove the pointer to the former last one.\n          this._end.next = null;\n        } else {\n          // otherwise take one out like a->b->c is a->c, the garbage collector\n          // from js will del the node b if there is no pointer to it left.\n          previous.next = current.next;\n          // and stop the loop\n          return;\n        }\n      }\n      previous = current;\n      current = current.next; \n    }\n  }\n  log() {\n    let current = this._start;\n    while (current !== null) {\n     console.log(current.data);\n     current = current.next; \n    }\n  }\n  each(f) {\n    let current = this._start;\n    while (current !== null) {\n      f(current);\n      current = current.next; \n    }\n  }\n}\n\nconst list = new List();\n// console.log(list);\n\nfor (let i = 1; i <= 3; i++) {\n  list.add(i);\n}\n\n// console.log(list);\n\n// log the list\n// list.log();\n\nlist.insertAsFirst('h');\n// list.log()\n\nlist.delete(3);\nlist.log();\n\nlist.each((item)=>console.log(item))\n\n\n"]}